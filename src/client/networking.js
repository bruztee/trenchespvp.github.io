import io from 'socket.io-client';
import { throttle } from 'throttle-debounce';
import { processGameUpdate } from './state';

const Constants = require('../shared/constants');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è WebSocket (ws –∏–ª–∏ wss)
const socketProtocol = (window.location.protocol.includes('https')) ? 'wss' : 'ws';
const socket = io(`${socketProtocol}://${window.location.host}`, {
  transports: ['websocket'], // –¢–æ–ª—å–∫–æ WebSocket
});

// –ü—Ä–æ–º–∏—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const connectedPromise = new Promise(resolve => {
  socket.on('connect', () => {
    console.log('‚úÖ Connected to server! Socket ID:', socket.id);
    resolve();
  });

  socket.on('connect_error', (error) => console.error('‚ùå Connection error:', error));
  socket.on('disconnect', (reason) => console.log('‚ùå Disconnected from server. Reason:', reason));
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
export const connect = onGameOver => (
  connectedPromise.then(() => {
    socket.on(Constants.MSG_TYPES.GAME_UPDATE, processGameUpdate);
    socket.on(Constants.MSG_TYPES.GAME_OVER, onGameOver);

    // üîπ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    socket.on('chatHistory', (history) => {
      console.log('üìú Received chat history:', history);
      history.forEach(displayChatMessage);

      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      setTimeout(scrollChatToBottom, 0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    });

    // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.on('chatMessage', (data) => {
      console.log('üí¨ Received chat message:', data);
      displayChatMessage(data);
      scrollChatToBottom(); // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    });
  }).catch(error => console.error('Error in connect promise:', error))
);

// üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
export const sendChatMessage = (message, username) => {
  connectedPromise.then(() => {
    if (!socket.connected) {
      console.warn('‚ö†Ô∏è Cannot send message: Socket is not connected');
      return;
    }
    const payload = { message: message.trim(), username: username.trim() };
    console.log(`üì§ Sending chat message:`, JSON.stringify(payload));

    socket.emit('chatMessage', payload);
    sendChatMessage.counter = (sendChatMessage.counter || 0) + 1;
  }).catch(error => console.error('‚ùå Error sending chat message:', error));
};

// üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
export const displayChatMessage = (data) => {
  const chatBox = document.getElementById('chat-box');
  if (!chatBox) {
    console.error('‚ö†Ô∏è Chat box not found in DOM!');
    return;
  }
  const messageElement = document.createElement('div');
  messageElement.textContent = `${data.username}: ${data.message}`;
  chatBox.appendChild(messageElement);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
  while (chatBox.children.length > 50) {
    chatBox.removeChild(chatBox.firstChild);
  }
};

// üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —á–∞—Ç–∞ –≤–Ω–∏–∑
export const scrollChatToBottom = () => {
  const chatBox = document.getElementById('chat-box');
  if (chatBox) {
    chatBox.scrollTop = chatBox.scrollHeight;
  }
};

// üîπ –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
export const play = username => {
  if (!socket.connected) {
    console.warn('‚ö†Ô∏è Cannot join game: Socket is not connected');
    return;
  }
  socket.emit(Constants.MSG_TYPES.JOIN_GAME, username);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
  setTimeout(scrollChatToBottom, 0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
};

// üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ (throttle)
export const updateDirection = throttle(20, dir => {
  if (!socket.connected) {
    console.warn('‚ö†Ô∏è Cannot update direction: Socket is not connected');
    return;
  }
  socket.emit(Constants.MSG_TYPES.INPUT, dir);
});